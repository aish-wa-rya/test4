// Same as document.addEventListener("DOMContentLoaded"...
  // Same as document.querySelector("#navbarToggle").addEventListener("blur",...

// Convenience function for inserting innerHTML for 'select'

// Show loading icon inside element identified by 'selector'.

// Return substitute of '{{propName}}'
// with propValue in given 'string'

// Remove the class 'active' from home and switch to Menu button
      // Remove 'active' from home button
      // Add 'active' to menu button if not already there

// On page load (before images or CSS)

// TODO: STEP 0: Look over the code from
// *** start ***
// to
// *** finish ***
// below.
// We changed this code to retrieve all categories from the server instead of
// simply requesting home HTML snippet. We now also have another function
// called buildAndShowHomeHTML that will receive all the categories from the server
// and process them: choose random category, retrieve home HTML snippet, insert that
// random category into the home HTML snippet, and then insert that snippet into our
// main page (index.html).
//
// TODO: STEP 1: Substitute [...] below with the *value* of the function buildAndShowHomeHTML,
// so it can be called when server responds with the categories data.

// *** start ***
// On first load, show home view
  [...], // ***** <---- TODO: STEP 1: Substitute [...] ******
  true); // Explicitly setting the flag to get JSON from server processed into an object literal
// *** finish **

// Builds HTML for the home page based on categories array
// returned from the server.
  // Load home snippet page
      // TODO: STEP 2: Here, call chooseRandomCategory, passing it retrieved 'categories'
      // Pay attention to what type of data that function returns vs what the chosenCategoryShortName
      // variable's name implies it expects.
      // var chosenCategoryShortName = ....


      // TODO: STEP 3: Substitute {{randomCategoryShortName}} in the home html snippet with the
      // chosen category from STEP 2. Use existing insertProperty function for that purpose.
      // Look through this code for an example of how to do use the insertProperty function.
      // WARNING! You are inserting something that will have to result in a valid Javascript
      // syntax because the substitution of {{randomCategoryShortName}} becomes an argument
      // being passed into the $dc.loadMenuItems function. Think about what that argument needs
      // to look like. For example, a valid call would look something like this:
      // $dc.loadMenuItems('L')
      // Hint: you need to surround the chosen category short name with something before inserting
      // it into the home html snippet.
      //
      // var homeHtmlToInsertIntoMainPage = ....


      // TODO: STEP 4: Insert the produced HTML in STEP 3 into the main page
      // Use the existing insertHtml function for that purpose. Look through this code for an example
      // of how to do that.
      // ....

    false); // False here because we are getting just regular HTML from the server, so no need to process JSON.

// Given array of category objects, returns a random category object.
  // Choose a random index into the array (from 0 inclusively until array length (exclusively))
  // return category object with that randomArrayIndex

// Load the menu categories view

// Load the menu items view
// 'categoryShort' is a short_name for a category

// Builds HTML for the categories page based on the data
// from the server
  // Load title snippet of categories page
      // Retrieve single category snippet
          // Switch CSS class active to menu button

// Using categories data and snippets html
// build categories view HTML to be inserted into page
  // Loop over categories
    // Insert category values

// Builds HTML for the single category page based on the data
// from the server
  // Load title snippet of menu items page
      // Retrieve single menu item snippet
          // Switch CSS class active to menu button

// Using category and menu items data and snippets html
// build menu items view HTML to be inserted into page
  // Loop over menu items
    // Insert menu item values
        // Add clearfix after every second menu item

// Appends price with '$' if price exists
  // If not specified, replace with empty string

// Appends portion name in parens if it exists
  // If not specified, return original string

